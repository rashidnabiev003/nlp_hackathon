InformationRetrieval.text_embedder
==================================

.. py:module:: InformationRetrieval.text_embedder


Attributes
----------

.. autoapisummary::

   InformationRetrieval.text_embedder.DEFAULT_BATCH_SIZE
   InformationRetrieval.text_embedder.DEFAULT_RANDOM_SEED
   InformationRetrieval.text_embedder.RUSSIAN_MODEL_MAPPING


Classes
-------

.. autoapisummary::

   InformationRetrieval.text_embedder.TextEmbedder
   InformationRetrieval.text_embedder.TransformerEmbedder
   InformationRetrieval.text_embedder.MultilingualTransformerEmbedder
   InformationRetrieval.text_embedder.HighQualityTransformerEmbedder
   InformationRetrieval.text_embedder.RussianTransformerEmbedder


Module Contents
---------------

.. py:data:: DEFAULT_BATCH_SIZE
   :value: 32


.. py:data:: DEFAULT_RANDOM_SEED
   :value: 42


.. py:data:: RUSSIAN_MODEL_MAPPING
   :value: (('deeppavlov', 'DeepPavlov/rubert-base-cased-sentence'), ('sbert',...


.. py:class:: TextEmbedder

   Bases: :py:obj:`abc.ABC`


   Abstract base class for text embedding.


   .. py:method:: embed(text: Union[InformationRetrieval.text_parser.ParsedText, List[InformationRetrieval.text_parser.ParsedText]]) -> numpy.ndarray
      :abstractmethod:


      Convert text into vector embeddings.



.. py:class:: TransformerEmbedder(model_name: str = 'all-MiniLM-L6-v2')

   Bases: :py:obj:`TextEmbedder`


   Text embedder using Sentence Transformers.


   .. py:attribute:: model


   .. py:attribute:: embedding_dim


   .. py:attribute:: batch_size
      :value: 32



   .. py:method:: embed(text: Union[InformationRetrieval.text_parser.ParsedText, List[InformationRetrieval.text_parser.ParsedText]]) -> numpy.ndarray

      Create embeddings using transformer model.

      Args:
          text: ParsedText object or list of ParsedText objects

      Returns:
          numpy array of embeddings with shape (n_chunks, embedding_dim)



.. py:class:: MultilingualTransformerEmbedder

   Bases: :py:obj:`TransformerEmbedder`


   Multilingual version of transformer embedder.


.. py:class:: HighQualityTransformerEmbedder

   Bases: :py:obj:`TransformerEmbedder`


   High quality version of transformer embedder.


.. py:class:: RussianTransformerEmbedder(model_type: str = 'deeppavlov')

   Bases: :py:obj:`TransformerEmbedder`


   Text embedder optimized for Russian language.


   .. py:attribute:: model_mapping


