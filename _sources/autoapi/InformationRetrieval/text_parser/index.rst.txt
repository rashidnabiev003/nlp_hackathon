InformationRetrieval.text_parser
================================

.. py:module:: InformationRetrieval.text_parser


Attributes
----------

.. autoapisummary::

   InformationRetrieval.text_parser.MetadataValue
   InformationRetrieval.text_parser.logger


Classes
-------

.. autoapisummary::

   InformationRetrieval.text_parser.ParsedText
   InformationRetrieval.text_parser.TextParser
   InformationRetrieval.text_parser.DocumentChunker


Module Contents
---------------

.. py:data:: MetadataValue

.. py:data:: logger

.. py:class:: ParsedText

   Data class to store parsed text information.


   .. py:attribute:: tokens
      :type:  List[str]


   .. py:attribute:: word_count
      :type:  int


   .. py:attribute:: sentence_count
      :type:  int


   .. py:attribute:: metadata
      :type:  Dict[str, MetadataValue]


.. py:class:: TextParser(language: str = 'en')

   Text parser using LangChain for IR tasks.


   .. py:attribute:: language
      :value: 'en'



   .. py:attribute:: lang_map


   .. py:attribute:: text_splitter


   .. py:method:: parse(text: str) -> ParsedText

      Parse text and return structured information.

      Args:
          text: Input text to parse

      Returns:
          ParsedText object with parsing results



.. py:class:: DocumentChunker(chunk_size: int = 500, chunk_overlap: int = 100, language: str = 'russian')

   Handles document chunking using LangChain's text splitter.


   .. py:attribute:: chunk_size
      :value: 500



   .. py:attribute:: chunk_overlap
      :value: 100



   .. py:attribute:: language
      :value: 'russian'



   .. py:attribute:: text_splitter


   .. py:method:: create_chunks(parsed_text: ParsedText) -> Iterator[ParsedText]

      Create overlapping chunks from parsed text.

      Args:
          parsed_text: The text to chunk

      Yields:
          ParsedText: Each chunk of the text as a ParsedText object



   .. py:method:: _process_chunk(chunk_text: str, chunk_index: int, position: int, parsed_text: ParsedText) -> ParsedText

      Process a single chunk of text.

      Args:
          chunk_text: The chunk text to process
          chunk_index: Index of the current chunk
          position: Current position in text
          parsed_text: Original parsed text for metadata

      Returns:
          ParsedText: Processed chunk



