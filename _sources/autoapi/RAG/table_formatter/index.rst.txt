RAG.table_formatter
===================

.. py:module:: RAG.table_formatter

.. autoapi-nested-parse::

   Table formatting utilities for the LLaMA RAG system.



Functions
---------

.. autoapisummary::

   RAG.table_formatter.format_cell
   RAG.table_formatter.format_table_prefix
   RAG.table_formatter.format_row_prefix
   RAG.table_formatter.format_location
   RAG.table_formatter.process_row_data
   RAG.table_formatter.format_row
   RAG.table_formatter.process_table_row
   RAG.table_formatter.process_tables


Module Contents
---------------

.. py:function:: format_cell(column: str, cell_content: str) -> str

   Format a cell value with its column name.

   Args:
       column: Column name
       cell_content: Cell content

   Returns:
       str: Formatted cell value


.. py:function:: format_table_prefix(table_idx: int) -> str

   Format table prefix.

   Args:
       table_idx: Table index

   Returns:
       str: Formatted table prefix


.. py:function:: format_row_prefix(row_idx: int) -> str

   Format row prefix.

   Args:
       row_idx: Row index

   Returns:
       str: Formatted row prefix


.. py:function:: format_location(table_idx: int, row_idx: int) -> str

   Format table and row location.

   Args:
       table_idx: Table index
       row_idx: Row index

   Returns:
       str: Formatted location string


.. py:function:: process_row_data(row_data: pandas.Series) -> List[str]

   Process row data into formatted cells.

   Args:
       row_data: Row data

   Returns:
       List[str]: List of formatted cells


.. py:function:: format_row(table_idx: int, row_idx: int, row_data: pandas.Series) -> Optional[str]

   Format a table row into a text string.

   Args:
       table_idx: Table index
       row_idx: Row index
       row_data: Row data

   Returns:
       Optional[str]: Formatted row text or None if empty


.. py:function:: process_table_row(table_idx: int, row_idx: int, row: pandas.Series, process_line: Callable[[str], str]) -> Optional[str]

   Process a single table row.

   Args:
       table_idx: Table index
       row_idx: Row index
       row: Row data
       process_line: Function to process text

   Returns:
       Optional[str]: Processed row text or None


.. py:function:: process_tables(doc_data: RAG.types.DocumentData, process_line: Callable[[str], str]) -> List[str]

   Process table data into text chunks.

   Args:
       doc_data: Document data
       process_line: Function to process each line

   Returns:
       List[str]: Processed table chunks


