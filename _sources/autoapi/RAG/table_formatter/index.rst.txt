RAG.table_formatter
===================

.. py:module:: RAG.table_formatter

.. autoapi-nested-parse::

   Table formatting utilities for the LLaMA RAG system.



Classes
-------

.. autoapisummary::

   RAG.table_formatter.TableFormatter


Functions
---------

.. autoapisummary::

   RAG.table_formatter.process_table_row
   RAG.table_formatter.process_tables


Module Contents
---------------

.. py:class:: TableFormatter

   Handles table formatting operations.


   .. py:method:: format_cell(column: str, cell_content: str) -> str
      :classmethod:


      Format a cell value with its column name.

      Args:
          column: Column name
          cell_content: Cell content

      Returns:
          str: Formatted cell value



   .. py:method:: format_table_prefix(table_idx: int) -> str
      :classmethod:


      Format table prefix.

      Args:
          table_idx: Table index

      Returns:
          str: Formatted table prefix



   .. py:method:: format_row_prefix(row_idx: int) -> str
      :classmethod:


      Format row prefix.

      Args:
          row_idx: Row index

      Returns:
          str: Formatted row prefix



   .. py:method:: format_location(table_idx: int, row_idx: int) -> str
      :classmethod:


      Format table and row location.

      Args:
          table_idx: Table index
          row_idx: Row index

      Returns:
          str: Formatted location string



   .. py:method:: process_row_data(row_data: pandas.Series) -> List[str]
      :classmethod:


      Process row data into formatted cells.

      Args:
          row_data: Row data

      Returns:
          List[str]: List of formatted cells



   .. py:method:: format_row(table_idx: int, row_idx: int, row_data: pandas.Series) -> Optional[str]
      :classmethod:


      Format a table row into a text string.

      Args:
          table_idx: Table index
          row_idx: Row index
          row_data: Row data

      Returns:
          Optional[str]: Formatted row text or None if empty



.. py:function:: process_table_row(table_idx: int, row_idx: int, row: pandas.Series, process_line: Callable[[str], str]) -> Optional[str]

   Process a single table row.

   Args:
       table_idx: Table index
       row_idx: Row index
       row: Row data
       process_line: Function to process text

   Returns:
       Optional[str]: Processed row text or None


.. py:function:: process_tables(doc_data: RAG.types.DocumentData, process_line: Callable[[str], str]) -> List[str]

   Process table data into text chunks.

   Args:
       doc_data: Document data
       process_line: Function to process each line

   Returns:
       List[str]: Processed table chunks


